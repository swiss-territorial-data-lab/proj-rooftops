# 1 - Prepare the lidar point cloud
prepare_data.py:
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data
  pcd_dir: initial/LiDAR
  inputs:
    pcd_tiles: initial/LiDAR/Emprises tuiles Lidar 2019.shp
    shp_roofs: initial/vectors/SHP_CAD_BATIMENT_HORSOL_TOIT/CAD_BATIMENT_HORSOL_TOIT.shp
    egids: EGIDs_GT_training.csv
  output_dir: processed/PCD_segmentation/all_roofs
  filters:
    # building_type: residential
    # roof_inclination: mixed
    filter_class: False
    class_number: 6                 # 6: Building class
    filter_roof: True             # Remove all the point below the roof altitude
    distance_buffer: 1.0            # m, buffer value
  overwrite: False
  visualisation: False


# 2 - Point Cloud plane segmentation and clustering
pcd_segmentation.py: 
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data/processed/PCD_segmentation/all_roofs
  output_dir: per_EGID_data
  input_dir_pcd: per_EGID_data
  egids: completed_egids.csv
  segmentation:
    planes:
      # number_planes: 5            # Number of planes to expect
      distance_threshold: 0.0725    # Max distance a point can be from the plane model, and still be considered an inlier
      ransac: 3                     # Number of initial points to be considered inliers in each iteration
      iterations: 7000              # Number of iterations
      eps: 11                       # Density parameter that is used to find neighbouring points
      min_points: 1200              # Minimum number of points to form a plane
    clusters:
      eps: 0.8                      # Density parameter that is used to find neighbouring points
      min_points: 27                # Minimum number of points to form a cluster
  visualisation: False


# 3 - 2D vectorisation of segmented 3D point cloud 
vectorization.py:  
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data/processed/PCD_segmentation/all_roofs
  output_dir: .
  input_dir_pcd: per_EGID_data
  egids: completed_egids.csv
  roofs: CAD_BATIMENT_HORSOL_TOIT_EGID_subset.shp
  epsg: 2056
  area_threshold: 
    min: 91        # m2, minimum area of the segmented sections, below the vectorized polygon in will be classified as object
    max: 210       # m2, maximum area of the segmented objects, above the vectorized object in will be classified as plane
  alpha_shape: 2.4          # Alpha parameter used in the alpha shape algorithm to define a bounding polygon around a group of points 
  visualisation: False


# 3bis - Post-process the results to improve them
post_processing.py:
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data/processed/PCD_segmentation
  output_dir: post_processed_results
  merge_files: True
  buffer: True
  vw: True
  buffer_size: 1
  vw_threshold: 0.1
  detections: post_processed_results/detections.gpkg
  files:
    all_detections: all_roofs/all_EGID_occupation.gpkg
    residential_pitched: pitched_roofs/all_EGID_occupation.gpkg
    # administrative: 8_100_iter_admin_fnp/all_EGID_occupation_27.gpkg


# 3bisbis - Merge the obstacles that are overlapping
partition_to_obstacles.py:
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data/processed/PCD_segmentation
  output_dir: post_processing_tests/dissolving/after_simplification
  partition: improved_results/simplified_detections_VW.gpkg

# 4 - Evaluate the results
assess_results.py: 
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data
  output_dir: final/PCD_results
  detections: processed/PCD_segmentation/post_processed_results/simplified_detections_buffer_VW.gpkg
  ground_truth: ground_truth/partition/roofs_STDL_proofed_2023-11-10_LiDAR_training.shp
  egids: processed/PCD_segmentation/all_roofs/completed_egids.csv
  roofs: processed/PCD_segmentation/all_roofs/CAD_BATIMENT_HORSOL_TOIT_EGID_subset.shp
  method: fusion
  threshold: 0.1
  additional_metrics: True
  visualisation: True
  object_attributes:
    parameters: ['area', 'nearest_distance_centroid'] # Choice between: 'area', 'nearest_distance_border', 'nearest_distance_centroid' 
    area_ranges:  [[0,0.5], [0.5,1], [1,5], [5,10], [10,50], [50,100], [100, 750]] 
    distance_ranges: [[0,1], [1,5], [5,10], [10, 100]]


# 5 - Estimate the free surface
assess_area.py:
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data
  output_dir: final/PCD_results
  detections: processed/PCD_segmentation/post_processed_results/simplified_detections_buffer_VW.gpkg
  ground_truth: ground_truth/partition/roofs_STDL_proofed_2023-11-10_LiDAR_training.shp
  egids: processed/PCD_segmentation/all_roofs/completed_egids.csv
  roofs: processed/PCD_segmentation/all_roofs/CAD_BATIMENT_HORSOL_TOIT_EGID_subset.shp
  bins: [0, 25, 50, 75, 85, 95, 100] 
  method: fusion
  visualisation: True


# 2 & 3 & 4 - Optimization of the hyperparameters
optimize_hyperparam_LiDAR.py:
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data/processed/PCD_segmentation/all_roofs
  output_dir: optimization
  input_dir_pcd: per_EGID_data
  egids: completed_egids.csv
  ground_truth: ../../../ground_truth/partition/roofs_STDL_proofed_2023-11-10_LiDAR_training.shp
  roofs: CAD_BATIMENT_HORSOL_TOIT_EGID_subset.shp
  epsg: 2056
  parameters:
    alpha_shape: 2.4
  method: fusion
  visualisation: None


# 4 & 5 bis
combine_results.py: 
  working_dir: C:/Users/gwena/Documents/STDL/2_En_cours/occupation-toitures/02_Data
  output_dir: processed/PCD_segmentation/improved_results
  detections: processed/PCD_segmentation/all_optimizations/improved_results/simplified_detections_VW.gpkg
  ground_truth: ground_truth/partition/roofs_STDL_proofed_2023-11-10_LiDAR_training.shp
  egids: processed/PCD_segmentation/completed_egids.csv
  roofs: processed/PCD_segmentation/CAD_BATIMENT_HORSOL_TOIT_EGID_subset.shp
  classified_roofs: processed/roofs/roofs.gpkg
  classified_roofs_layer: roof_occupation_by_RF
  method: fusion
  threshold: 0.1
  additional_metrics: True
  visualisation: True
  object_attributes:
    parameters: ['area', 'nearest_distance_centroid'] # Choice between: 'area', 'nearest_distance_border', 'nearest_distance_centroid' 
    area_ranges:  [[0,0.5], [0.5,1], [1,5], [5,10], [10,50], [50,100], [100, 750]] 
    distance_ranges: [[0,1], [1,5], [5,10], [10, 100]]
  bins: [0, 25, 50, 75, 85, 95, 100] 
